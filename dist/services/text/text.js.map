{"version":3,"sources":["services/text/text.js"],"names":["createText","client","text","store","fetchParams","body","JSON","stringify","headers","createdText","PUT","err","NotFound","undefined","deleteText","id","rawDELETE","getText","fetchedText","GET","refreshIndex","POST","response"],"mappings":";;;;;;;;;;AAEA;;AAFA;AACA;AAGA;AACA;;AACA;;;;;;;AAOA,eAAeA,UAAf,CACIC,MADJ,EAEIC,IAFJ,EAGIC,KAHJ,EAIE;AACE,QAAMC,WAAW,GAAG;AAChBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe,EACjB,GAAGL,IADc;AAEjBC,MAAAA;AAFiB,KAAf,CADU;AAKhBK,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AALO,GAApB;;AAUA,MAAI;AACA,UAAMC,WAAW,GAAG,MAAMR,MAAM,CAACS,GAAP,CAAW,OAAX,EAAoBN,WAApB,CAA1B;AACA,WAAOK,WAAP;AACH,GAHD,CAGE,OAAOE,GAAP,EAAY;AACV,QAAIA,GAAG,YAAYC,oBAAnB,EAA6B;AACzB,aAAOC,SAAP;AACH;;AAED,UAAMF,GAAN;AACH;AACJ;AAED;;;;;;AAIA,eAAeG,UAAf,CACIb,MADJ,EAEIc,EAFJ,EAGE;AACE,QAAMd,MAAM,CAACe,SAAP,CAAkB,SAAQD,EAAG,EAA7B,CAAN;AACH;AAED;;;;;;AAIA,eAAeE,OAAf,CACIhB,MADJ,EAEIc,EAFJ,EAGE;AACE,MAAI;AACA,UAAMG,WAAW,GAAG,MAAMjB,MAAM,CAACkB,GAAP,CAAY,SAAQJ,EAAG,EAAvB,CAA1B;AACA,WAAOG,WAAP;AACH,GAHD,CAGE,OAAOP,GAAP,EAAY;AACV,QAAIA,GAAG,YAAYC,oBAAnB,EAA6B;AACzB,aAAOC,SAAP;AACH;;AAED,UAAMF,GAAN;AACH;AACJ;AAED;;;;;;;AAKA,eAAeS,YAAf,CAA4BnB,MAA5B,EAAoC;AAChC,QAAMA,MAAM,CAACoB,IAAP,CACF,qBADE,EAEFR,SAFE,EAGF;AAAES,IAAAA,QAAQ,EAAE;AAAZ,GAHE,CAAN;AAKH,C,CAED;AACA","sourcesContent":["// ============================================================\n// Import modules\nimport { NotFound } from '../../httpErrors';\n\n// ============================================================\n// Functions\n/**\n *\n * @param {Fetcher} client\n * @param {Text}    text   - Text to create\n * @param {Object}  [store]  - Storage parameters\n * @param {boolean} [store.refreshIndex]\n */\nasync function createText(\n    client,\n    text,\n    store,\n) {\n    const fetchParams = {\n        body: JSON.stringify({\n            ...text,\n            store,\n        }),\n        headers: {\n            'Content-type': 'application/json; charset=UTF-8',\n        },\n    };\n\n    try {\n        const createdText = await client.PUT('/text', fetchParams);\n        return createdText;\n    } catch (err) {\n        if (err instanceof NotFound) {\n            return undefined;\n        }\n\n        throw err;\n    }\n}\n\n/**\n *\n * @param {Fetcher} client\n */\nasync function deleteText(\n    client,\n    id,\n) {\n    await client.rawDELETE(`/text/${id}`);\n}\n\n/**\n *\n * @param {Fetcher} client\n */\nasync function getText(\n    client,\n    id,\n) {\n    try {\n        const fetchedText = await client.GET(`/text/${id}`);\n        return fetchedText;\n    } catch (err) {\n        if (err instanceof NotFound) {\n            return undefined;\n        }\n\n        throw err;\n    }\n}\n\n/**\n *\n * @param {Client} client\n * @public\n */\nasync function refreshIndex(client) {\n    await client.POST(\n        '/store/refreshIndex',\n        undefined,\n        { response: false },\n    );\n}\n\n// ============================================================\n// Exports\nexport {\n    createText as create,\n    deleteText as delete,\n    getText as get,\n    refreshIndex,\n};\n"],"file":"text.js"}