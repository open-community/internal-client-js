{"version":3,"sources":["services/text/find.js"],"names":["findIterator","client","author","account","authorAccount","identity","authorIdentity","content","context","creationDate","max","creationDateMax","min","creationDateMin","deletionDate","deletionDateMax","deletionDateMin","id","owner","pagination","cache","initialCacheSize","offset","paginationOffset","size","paginationSize","search","sort","store","forceIndex","title","appendSearchParams","cacheSize","list","total","GET","remaining","length","fetchMore","cacheUpdatePromise","nextQuantity","updateCache","shift","params","setSearchParam","Cache","constructor","firstItems","data","get","count","fetched","newList","concat"],"mappings":"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","sourcesContent":["/**\n * @param {Fetcher} client\n * @returns {Text[]}\n */\nasync function* findIterator(\n    client,\n    {\n        author: {\n            account: authorAccount,\n            identity: authorIdentity,\n        } = {},\n        content,\n        context,\n        creationDate: {\n            max: creationDateMax,\n            min: creationDateMin,\n        } = {},\n        deletionDate: {\n            max: deletionDateMax,\n            min: deletionDateMin,\n        } = {},\n        id,\n        owner,\n        pagination: {\n            cache: initialCacheSize = 10,\n            offset: paginationOffset,\n            size: paginationSize = 10,\n        } = {},\n        search,\n        sort,\n        store: {\n            forceIndex = false,\n        } = {},\n        title,\n    } = {},\n) {\n    client.appendSearchParams('author.account.id', authorAccount);\n    client.appendSearchParams('author.identity.id', authorIdentity);\n    client.appendSearchParams('content', content);\n    client.appendSearchParams('context.id', context);\n    client.appendSearchParams('creation-date.max', creationDateMax);\n    client.appendSearchParams('creation-date.min', creationDateMin);\n    client.appendSearchParams('deletion-date.max', deletionDateMax);\n    client.appendSearchParams('deletion-date.min', deletionDateMin);\n    client.appendSearchParams('id', id);\n    client.appendSearchParams('owner.id', owner);\n    client.appendSearchParams('pagination.offset', paginationOffset);\n    client.appendSearchParams('pagination.size', paginationSize);\n    client.appendSearchParams('search', search);\n    client.appendSearchParams('sort', sort);\n    client.appendSearchParams('store.forceIndex', forceIndex);\n    client.appendSearchParams('title', title);\n\n    let cacheSize = initialCacheSize;\n\n    const { list: cache, total } = await client.GET('/text');\n\n    const remaining = total - cache.length - paginationOffset;\n    const fetchMore = remaining > 0;\n    let cacheUpdatePromise;\n    const nextQuantity = 10;\n\n    while (true) {\n        // Update cache\n        if (cache.length < nextQuantity) {\n            cacheUpdatePromise = updateCache(client, cache);\n        }\n\n        // If all results fetched and if last cache result, we stop the generator\n        if (fetchMore && cache.length === 1) {\n            return cache.shift();\n        }\n\n        const params = yield {\n            list: cache.shift(),\n            remaining,\n            total,\n        };\n\n        if (params && typeof params.size !== 'undefined') {\n            client.setSearchParam('pagination.size', paginationSize);\n        }\n\n        if (params && typeof params.cache !== 'undefined') {\n            cacheSize = params.cache;\n        }\n    }\n}\n\nclass Cache {\n    constructor(client, size, total, firstItems) {\n        this.client = client;\n        this.size = size;\n        this.total = total;\n        this.data = [...firstItems];\n    }\n\n    async get(count) {\n        \n    }\n}\n\nasync function updateCache(client, cache, size, total, fetched) {\n    let remaining = total - fetched;\n\n    while (cache.length < size && remaining > 0) {\n        client.setSearchParam('pagination.offset', fetched);\n\n        // eslint-disable-next-line no-await-in-loop\n        const { list: newList } = await client.GET('/text');\n        cache.concat(...newList);\n\n        remaining -= newList.length;\n    }\n}\n\n// ============================================================\n// Exports\nexport {\n    findIterator,\n};\n"],"file":"find.js"}