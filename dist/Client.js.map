{"version":3,"sources":["Client.js"],"names":["Client","constructor","urlMap","servicesName","Object","values","Services","entries","forEach","name","url","includes","Error","text","reduce","acc","fct","bind","undefined","getNewFetcher","TEXT","type","Fetcher","getURL","URL"],"mappings":";;;;;;;AAEA;;AAIA;;AACA;;AACA;;;;;;AARA;AACA;AAGA;AACA;AAKA;AACA;AACA,MAAMA,MAAN,CAAa;AACT;;;;AAIAC,EAAAA,WAAW,CAACC,MAAM,GAAG,EAAV,EAAc;AACrB,UAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAcC,mBAAd,CAArB;AAEAF,IAAAA,MAAM,CAACG,OAAP,CAAeL,MAAf,EAAuBM,OAAvB,CAA+B,CAAC,CAACC,IAAD,EAAOC,GAAP,CAAD,KAAiB;AAC5C,UAAI,CAACP,YAAY,CAACQ,QAAb,CAAsBF,IAAtB,CAAL,EAAkC;AAC9B,cAAM,IAAIG,KAAJ,CAAW,oBAAmBH,IAAK,EAAnC,CAAN;AACH;;AAED,UAAIC,GAAG,YAAYN,MAAnB,EAA2B;AACvB,cAAM,IAAIQ,KAAJ,CAAW,GAAEH,IAAK,sBAAlB,CAAN;AACH;AACJ,KARD;AAUA,SAAKP,MAAL,GAAc,EAAE,GAAGA;AAAL,KAAd;AAEA,SAAKW,IAAL,GAAYT,MAAM,CAACG,OAAP,CAAeM,IAAf,EAAqBC,MAArB,CACR,CAACC,GAAD,EAAM,CAACN,IAAD,EAAOO,GAAP,CAAN,KAAsB;AAClBD,MAAAA,GAAG,CAACN,IAAD,CAAH,GAAYO,GAAG,CAACC,IAAJ,CAASC,SAAT,EAAoB,KAAKC,aAAL,CAAmBb,oBAASc,IAA5B,CAApB,CAAZ;AACA,aAAOL,GAAP;AACH,KAJO,EAKR,EALQ,CAAZ;AAOH;AAED;;;;;;AAIAI,EAAAA,aAAa,CAACE,IAAD,EAAO;AAChB,WAAO,IAAIC,gBAAJ,CACH,KAAKC,MAAL,CAAYF,IAAZ,CADG,CAAP;AAGH;AAED;;;;;;;AAKAE,EAAAA,MAAM,CAACF,IAAD,EAAO;AACT,UAAMX,GAAG,GAAG,KAAKR,MAAL,CAAYmB,IAAZ,CAAZ;;AAEA,QAAI,CAACX,GAAL,EAAU;AACN,YAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;AACH;;AAED,WAAO,IAAIY,QAAJ,CAAQd,GAAR,CAAP;AACH;;AApDQ;AAuDb;;;;;;AAOA;AACA;;;eACeV,M","sourcesContent":["// ============================================================\n// Import packages\nimport { URL } from 'url';\n\n// ============================================================\n// Import modules\nimport Fetcher from './Fetcher';\nimport * as text from './services/text';\nimport { Services } from './constants';\n\n// ============================================================\n// Class\nclass Client {\n    /**\n     * @param {Object.<string>} urlMap\n     * @public\n     */\n    constructor(urlMap = {}) {\n        const servicesName = Object.values(Services);\n\n        Object.entries(urlMap).forEach(([name, url]) => {\n            if (!servicesName.includes(name)) {\n                throw new Error(`Unknown service: ${name}`);\n            }\n\n            if (url instanceof Object) {\n                throw new Error(`${name}: Not a valid value `);\n            }\n        });\n\n        this.urlMap = { ...urlMap };\n\n        this.text = Object.entries(text).reduce(\n            (acc, [name, fct]) => {\n                acc[name] = fct.bind(undefined, this.getNewFetcher(Services.TEXT));\n                return acc;\n            },\n            {},\n        );\n    }\n\n    /**\n     * @returns {Fetcher}\n     * @internal\n     */\n    getNewFetcher(type) {\n        return new Fetcher(\n            this.getURL(type),\n        );\n    }\n\n    /**\n     * Return a new URL object\n     * @returns {URL}\n     * @public\n     */\n    getURL(type) {\n        const url = this.urlMap[type];\n\n        if (!url) {\n            throw new Error('No URL defined for this server type');\n        }\n\n        return new URL(url);\n    }\n}\n\n/* Client.prototype.text = Object.fromEntries(\n    Object.entries(text).map(([name, fct]) => [\n        name,\n        fct.bind(undefined, this.getNewFetcher(Services.TEXT)),\n    ]),\n); */\n\n// ============================================================\n// Exports\nexport default Client;\n"],"file":"Client.js"}