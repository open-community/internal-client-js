{"version":3,"sources":["Client.js"],"names":["Client","urlMap","servicesName","Object","keys","Services","entries","forEach","name","url","includes","Error","type","Fetcher","getURL","URL","prototype","text","fromEntries","map","fct","bind","undefined","getNewFetcher","TEXT"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;IACMA,M;;;AACF;;;;AAIA,oBAAyB;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;AAAA;;AACrB,QAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYC,mBAAZ,CAArB;AAEAF,IAAAA,MAAM,CAACG,OAAP,CAAeL,MAAf,EAAuBM,OAAvB,CAA+B,gBAAiB;AAAA;AAAA,UAAfC,IAAe;AAAA,UAATC,GAAS;;AAC5C,UAAI,CAACP,YAAY,CAACQ,QAAb,CAAsBF,IAAtB,CAAL,EAAkC;AAC9B,cAAM,IAAIG,KAAJ,4BAA8BH,IAA9B,EAAN;AACH;;AAED,UAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AACzB,cAAM,IAAIE,KAAJ,WAAaH,IAAb,oBAAN;AACH;AACJ,KARD;AAUA,SAAKP,MAAL,qBAAmBA,MAAnB;AACH;AAED;;;;;;;;kCAIcW,I,EAAM;AAChB,aAAO,IAAIC,mBAAJ,CACH,IADG,EAEH,KAAKC,MAAL,CAAYF,IAAZ,CAFG,CAAP;AAIH;AAED;;;;;;;;2BAKOA,I,EAAM;AACT,UAAMH,GAAG,GAAG,KAAKR,MAAL,CAAYW,IAAZ,CAAZ;;AAEA,UAAI,CAACH,GAAL,EAAU;AACN,cAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;AACH;;AAED,aAAO,IAAII,GAAJ,CAAQN,GAAR,CAAP;AACH;;;;;;AAGLT,MAAM,CAACgB,SAAP,CAAiBC,IAAjB,GAAwBd,MAAM,CAACe,WAAP,CACpBf,MAAM,CAACG,OAAP,CAAeW,IAAf,EAAqBE,GAArB,CAAyB,SAASA,GAAT,QAA0B;AAAA;AAAA,MAAZX,IAAY;AAAA,MAANY,GAAM;;AAC/C,SAAO,CACHZ,IADG,EAEHY,GAAG,CAACC,IAAJ,CAASC,SAAT,EAAoB,KAAKC,aAAL,CAAmBlB,oBAASmB,IAA5B,CAApB,CAFG,CAAP;AAIH,CALD,CADoB,CAAxB,C,CASA;AACA;;eACexB,M","sourcesContent":["// ============================================================\n// Import modules\nimport Fetcher from './Fetcher';\nimport * as text from './services/text';\nimport { Services } from './constants';\n\n// ============================================================\n// Class\nclass Client {\n    /**\n     * @param {Object.<string>} urlMap\n     * @public\n     */\n    constructor(urlMap = {}) {\n        const servicesName = Object.keys(Services);\n\n        Object.entries(urlMap).forEach(([name, url]) => {\n            if (!servicesName.includes(name)) {\n                throw new Error(`Unknown service: ${name}`);\n            }\n\n            if (typeof url !== 'string') {\n                throw new Error(`${name}: Not a string`);\n            }\n        });\n\n        this.urlMap = { ...urlMap };\n    }\n\n    /**\n     * @returns {Fetcher}\n     * @internal\n     */\n    getNewFetcher(type) {\n        return new Fetcher(\n            this,\n            this.getURL(type),\n        );\n    }\n\n    /**\n     * Return a new URL object\n     * @returns {URL}\n     * @public\n     */\n    getURL(type) {\n        const url = this.urlMap[type];\n\n        if (!url) {\n            throw new Error('No URL defined for this server type');\n        }\n\n        return new URL(url);\n    }\n}\n\nClient.prototype.text = Object.fromEntries(\n    Object.entries(text).map(function map([name, fct]) {\n        return [\n            name,\n            fct.bind(undefined, this.getNewFetcher(Services.TEXT)),\n        ];\n    }),\n);\n\n// ============================================================\n// Exports\nexport default Client;\n"],"file":"Client.js"}