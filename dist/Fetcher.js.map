{"version":3,"sources":["Fetcher.js"],"names":["Fetcher","constructor","url","appendSearchParams","name","value","searchParams","append","DELETE","path","params","result","fetchJSON","method","fetch","href","response","ok","code","NotFound","ClientError","json","GET","getURL","URL","POST","PUT"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;AAJA;AACA;AAKA;AACA;AACA,MAAMA,OAAN,CAAc;AACV;;;;AAIAC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKA,GAAL,GAAWA,GAAX;AACH;AAED;;;;;;;;AAMAC,EAAAA,kBAAkB,CAACC,IAAD,EAAOC,KAAP,EAAc;AAC5B,QAAI,CAACA,KAAL,EAAY;AACR;AACH;;AAED,SAAKH,GAAL,CAASI,YAAT,CAAsBC,MAAtB,CAA6BH,IAA7B,EAAmCC,KAAnC;AACH;AAED;;;;;;;AAKA,QAAMG,MAAN,CAAaC,IAAb,EAAmBC,MAAnB,EAA2B;AACvB,UAAMC,MAAM,GAAG,MAAM,KAAKC,SAAL,CAAeH,IAAf,EAAqB,EACtC,GAAGC,MADmC;AAEtCG,MAAAA,MAAM,EAAE;AAF8B,KAArB,CAArB;AAKA,WAAOF,MAAP;AACH;AAED;;;;;;;;AAMA,QAAMG,KAAN,CAAYL,IAAI,GAAG,GAAnB,EAAwBC,MAAxB,EAAgC;AAC5B,UAAMR,GAAG,GAAG,kBAAQ,KAAKA,GAAL,CAASa,IAAjB,EAAuBN,IAAvB,CAAZ;AAEA,UAAMO,QAAQ,GAAG,MAAM,wBAAMd,GAAN,EAAWQ,MAAX,CAAvB;;AAEA,QAAIM,QAAQ,CAACC,EAAb,EAAiB;AACb,aAAOD,QAAP;AACH;;AAED,QAAIA,QAAQ,CAACE,IAAT,KAAkB,GAAtB,EAA2B;AACvB,YAAM,IAAIC,oBAAJ,CAAaH,QAAb,CAAN;AACH;;AAED,UAAM,IAAII,uBAAJ,CAAgBJ,QAAhB,CAAN;AACH;AAED;;;;;;;;AAMA,QAAMJ,SAAN,CAAgBH,IAAI,GAAG,GAAvB,EAA4BC,MAA5B,EAAoC;AAChC,UAAMM,QAAQ,GAAG,MAAM,KAAKF,KAAL,CAAWL,IAAX,EAAiBC,MAAjB,CAAvB;AACA,WAAOM,QAAQ,CAACK,IAAT,EAAP;AACH;;AAED,QAAMC,GAAN,CAAUb,IAAV,EAAgBC,MAAhB,EAAwB;AACpB,UAAMC,MAAM,GAAG,MAAM,KAAKC,SAAL,CAAeH,IAAf,EAAqB,EACtC,GAAGC,MADmC;AAEtCG,MAAAA,MAAM,EAAE;AAF8B,KAArB,CAArB;AAKA,WAAOF,MAAP;AACH;AAED;;;;;;;AAKAY,EAAAA,MAAM,GAAG;AACL,WAAO,IAAIC,QAAJ,CAAQ,KAAKtB,GAAb,CAAP;AACH;;AAED,QAAMuB,IAAN,CAAWhB,IAAX,EAAiBC,MAAjB,EAAyB;AACrB,UAAMC,MAAM,GAAG,MAAM,KAAKC,SAAL,CAAeH,IAAf,EAAqB,EACtC,GAAGC,MADmC;AAEtCG,MAAAA,MAAM,EAAE;AAF8B,KAArB,CAArB;AAKA,WAAOF,MAAP;AACH;;AAED,QAAMe,GAAN,CAAUjB,IAAV,EAAgBC,MAAhB,EAAwB;AACpB,UAAMC,MAAM,GAAG,MAAM,KAAKC,SAAL,CAAeH,IAAf,EAAqB,EACtC,GAAGC,MADmC;AAEtCG,MAAAA,MAAM,EAAE;AAF8B,KAArB,CAArB;AAKA,WAAOF,MAAP;AACH;;AAxGS,C,CA2Gd;AACA;;;eACeX,O","sourcesContent":["// ============================================================\n// Import packages\nimport { URL, resolve } from 'url';\nimport fetch from 'node-fetch';\nimport { NotFound, ClientError } from './httpErrors';\n\n// ============================================================\n// Class\nclass Fetcher {\n    /**\n     *\n     * @param {URL}    url\n     */\n    constructor(url) {\n        this.url = url;\n    }\n\n    /**\n     * Add a search param to the URL.\n     * @param {string} name\n     * @param {*} value\n     * @public\n     */\n    appendSearchParams(name, value) {\n        if (!value) {\n            return;\n        }\n\n        this.url.searchParams.append(name, value);\n    }\n\n    /**\n     * Perform a a HTTP DELETE fetch.\n     * @param {string} path\n     * @param {object} params\n     */\n    async DELETE(path, params) {\n        const result = await this.fetchJSON(path, {\n            ...params,\n            method: 'DELETE',\n        });\n\n        return result;\n    }\n\n    /**\n     * Perform a fetch\n     * @param {string} path\n     * @param {Object} params\n     * @public\n     */\n    async fetch(path = '/', params) {\n        const url = resolve(this.url.href, path);\n\n        const response = await fetch(url, params);\n\n        if (response.ok) {\n            return response;\n        }\n\n        if (response.code === 404) {\n            throw new NotFound(response);\n        }\n\n        throw new ClientError(response);\n    }\n\n    /**\n     * Perform a fetch\n     * @param {string} path\n     * @param {Object} params\n     * @public\n     */\n    async fetchJSON(path = '/', params) {\n        const response = await this.fetch(path, params);\n        return response.json();\n    }\n\n    async GET(path, params) {\n        const result = await this.fetchJSON(path, {\n            ...params,\n            method: 'GET',\n        });\n\n        return result;\n    }\n\n    /**\n     * Return a new URL object\n     * @returns {URL}\n     * @public\n     */\n    getURL() {\n        return new URL(this.url);\n    }\n\n    async POST(path, params) {\n        const result = await this.fetchJSON(path, {\n            ...params,\n            method: 'POST',\n        });\n\n        return result;\n    }\n\n    async PUT(path, params) {\n        const result = await this.fetchJSON(path, {\n            ...params,\n            method: 'PUT',\n        });\n\n        return result;\n    }\n}\n\n// ============================================================\n// Exports\nexport default Fetcher;\n"],"file":"Fetcher.js"}