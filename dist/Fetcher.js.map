{"version":3,"sources":["Fetcher.js"],"names":["Fetcher","constructor","url","appendSearchParams","name","value","searchParams","append","DELETE","path","params","response","rawDELETE","json","fetch","URL","forEach","ok","code","NotFound","ClientError","fetchJSON","GET","rawGET","getURL","POST","rawPOST","PUT","rawPUT","result","method"],"mappings":"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","sourcesContent":["// ============================================================\n// Import packages\nimport { URL } from 'url';\nimport fetch from 'node-fetch';\nimport { NotFound, ClientError } from './httpErrors';\n\n// ============================================================\n// Class\nclass Fetcher {\n    /**\n     *\n     * @param {URL}    url\n     */\n    constructor(url) {\n        this.url = url;\n    }\n\n    /**\n     * Add a search param to the URL.\n     * @param {string} name\n     * @param {*} value\n     * @public\n     */\n    appendSearchParams(name, value) {\n        if (!value) {\n            return;\n        }\n\n        this.url.searchParams.append(name, value);\n    }\n\n    /**\n     * Perform a a HTTP DELETE fetch.\n     * @param {string} path\n     * @param {object} params\n     */\n    async DELETE(path, params = {}) {\n        const response = await this.rawDELETE(path, params);\n        return response.json();\n    }\n\n    /**\n     * Perform a fetch\n     * @param {string} path\n     * @param {Object} params\n     * @public\n     */\n    async fetch(path = '/', params) {\n        // const url = resolve(this.url.href, path);\n\n        const url = new URL(path, this.url);\n\n        // Copying search params\n        this.url.searchParams.forEach((value, name) => {\n            url.searchParams.append(name, value);\n        });\n\n        const response = await fetch(url, params);\n\n        if (response.ok) {\n            return response;\n        }\n\n        if (response.code === 404) {\n            throw new NotFound(response);\n        }\n\n        throw new ClientError(response);\n    }\n\n    /**\n     * Perform a fetch\n     * @param {string} path\n     * @param {Object} params\n     * @public\n     */\n    async fetchJSON(path = '/', params = {}) {\n        const response = await this.fetch(path, params);\n        return response.json();\n    }\n\n    async GET(path, params = {}) {\n        const response = await this.rawGET(path, params);\n        return response.json();\n    }\n\n    /**\n     * Return a new URL object\n     * @returns {URL}\n     * @public\n     */\n    getURL() {\n        return new URL(this.url);\n    }\n\n    async POST(path, params = {}) {\n        const response = await this.rawPOST(path, params);\n        return response.json();\n    }\n\n    async PUT(path, params = {}) {\n        const response = await this.rawPUT(path, params);\n        return response.json();\n    }\n\n    /**\n     * Perform a raw HTTP DELETE fetch.\n     * @param {string} path\n     * @param {object} params\n     * @returns {Response}\n     */\n    async rawDELETE(path, params = {}) {\n        const result = await this.fetch(path, {\n            ...params,\n            method: 'DELETE',\n        });\n\n        return result;\n    }\n\n    async rawGET(path, params = {}) {\n        const result = await this.fetch(path, {\n            ...params,\n            method: 'GET',\n        });\n\n        return result;\n    }\n\n    async rawPOST(path, params = {}) {\n        const result = await this.fetch(path, {\n            ...params,\n            method: 'POST',\n        });\n\n        return result;\n    }\n\n    async rawPUT(path, params = {}) {\n        const result = await this.fetch(path, {\n            ...params,\n            method: 'PUT',\n        });\n\n        return result;\n    }\n}\n\n// ============================================================\n// Exports\nexport default Fetcher;\n"],"file":"Fetcher.js"}