{"version":3,"sources":["Fetcher.js"],"names":["ResponseType","JSON","TEXT","BLOB","Fetcher","constructor","url","appendSearchParams","name","value","searchParams","append","DELETE","path","params","response","responseType","rawDELETE","json","text","undefined","blob","fetch","URL","forEach","ok","status","NotFound","ClientError","fetchJSON","GET","rawGET","getURL","POST","rawPOST","PUT","rawPUT","result","method","setSearchParam"],"mappings":"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","sourcesContent":["// ============================================================\n// Import packages\nimport { URL } from 'url';\nimport fetch from 'node-fetch';\nimport { NotFound, ClientError } from './httpErrors';\n\n// ============================================================\n// Module's constants and variables\nconst ResponseType = {\n    JSON: 'json',\n    TEXT: 'text',\n    BLOB: 'blob',\n};\n\n// ============================================================\n// Class\nclass Fetcher {\n    /**\n     *\n     * @param {URL}    url\n     */\n    constructor(url) {\n        this.url = url;\n    }\n\n    /**\n     * Add a search param to the URL.\n     * @param {string} name\n     * @param {*} value\n     * @public\n     */\n    appendSearchParams(name, value) {\n        if (!value) {\n            return;\n        }\n\n        this.url.searchParams.append(name, value);\n    }\n\n    /**\n     * Perform a a HTTP DELETE fetch.\n     * @param {string} path\n     * @param {object} params\n     */\n    async DELETE(path, params = {}, { response: responseType = 'json' } = {}) {\n        const response = await this.rawDELETE(path, params);\n        switch (responseType) {\n        case ResponseType.JSON:\n            return response.json();\n        case ResponseType.TEXT:\n            return response.text();\n        case false:\n            return undefined;\n        default:\n            return response.blob();\n        }\n    }\n\n    /**\n     * Perform a fetch\n     * @param {string} path\n     * @param {Object} params\n     * @public\n     */\n    async fetch(path = '/', params) {\n        // const url = resolve(this.url.href, path);\n\n        const url = new URL(path, this.url);\n\n        // Copying search params\n        this.url.searchParams.forEach((value, name) => {\n            url.searchParams.append(name, value);\n        });\n\n        const response = await fetch(url, params);\n\n        if (response.ok) {\n            return response;\n        }\n\n        if (response.status === 404) {\n            throw new NotFound(response);\n        }\n\n        throw new ClientError(response);\n    }\n\n    /**\n     * Perform a fetch\n     * @param {string} path\n     * @param {Object} params\n     * @public\n     */\n    async fetchJSON(path = '/', params = {}) {\n        const response = await this.fetch(path, params);\n        return response.json();\n    }\n\n    async GET(path, params = {}, { response: responseType = 'json' } = {}) {\n        const response = await this.rawGET(path, params);\n        switch (responseType) {\n        case ResponseType.JSON:\n            return response.json();\n        case ResponseType.TEXT:\n            return response.text();\n        case false:\n            return undefined;\n        default:\n            return response.blob();\n        }\n    }\n\n    /**\n     * Return a new URL object\n     * @returns {URL}\n     * @public\n     */\n    getURL() {\n        return new URL(this.url);\n    }\n\n    async POST(path, params = {}, { response: responseType = 'json' } = {}) {\n        const response = await this.rawPOST(path, params);\n        switch (responseType) {\n        case ResponseType.JSON:\n            return response.json();\n        case ResponseType.TEXT:\n            return response.text();\n        case false:\n            return undefined;\n        default:\n            return response.blob();\n        }\n    }\n\n    async PUT(path, params = {}, { response: responseType = 'json' } = {}) {\n        const response = await this.rawPUT(path, params);\n        switch (responseType) {\n        case ResponseType.JSON:\n            return response.json();\n        case ResponseType.TEXT:\n            return response.text();\n        case false:\n            return undefined;\n        default:\n            return response.blob();\n        }\n    }\n\n    /**\n     * Perform a raw HTTP DELETE fetch.\n     * @param {string} path\n     * @param {object} params\n     * @returns {Response}\n     */\n    async rawDELETE(path, params = {}) {\n        const result = await this.fetch(path, {\n            ...params,\n            method: 'DELETE',\n        });\n\n        return result;\n    }\n\n    async rawGET(path, params = {}) {\n        const result = await this.fetch(path, {\n            ...params,\n            method: 'GET',\n        });\n\n        return result;\n    }\n\n    async rawPOST(path, params = {}) {\n        const result = await this.fetch(path, {\n            ...params,\n            method: 'POST',\n        });\n\n        return result;\n    }\n\n    async rawPUT(path, params = {}) {\n        const result = await this.fetch(path, {\n            ...params,\n            method: 'PUT',\n        });\n\n        return result;\n    }\n\n    setSearchParam(name, value) {\n        this.url.searchParams(name, value);\n    }\n}\n\n// ============================================================\n// Exports\nexport default Fetcher;\n\nexport {\n    ResponseType,\n};\n"],"file":"Fetcher.js"}